variables:
  MLFLOW_REPO_PATH: mlflow
  GCP_LOCATION: asia-southeast1-docker.pkg.dev
  GCP_REPO: machine-learning-ops/mlflow-server/v2


stages:
  - verify
  - build

verify-image-gcp:
  stage: verify
  tags:
    - dind
  image: docker:24.0.6-dind-alpine3.18
  rules:
    - if: $PLATFORM == "gcp"
  script:
    - exit_code=$(docker pull "${GCP_LOCATION}/${GCP_REPO}/mlflow:${IMAGE_TAG}" && echo $?)
    - if [[ $exit_code == 0 ]]; then echo "Image - ${GCP_LOCATION}/${GCP_REPO}/mlflow:${IMAGE_TAG} found; skip build"; exit 1; fi

generate-access-token-gcp:
  stage: build
  image: google/cloud-sdk:slim
  tags:
    - gcp
  needs:
    - job: verify-image-gcp
  before_script:
    - cat $GCP_SA_KEY >> gcp_sa.json
  script:
    - gcloud auth login --cred-file gcp_sa.json
    - gcp_token=$(gcloud auth print-access-token)
    - echo "GCP_TOKEN=${gcp_token}" >> gcp_token.env
  artifacts:
    reports:
      dotenv: gcp_token.env
    expire_in: 1hr

build-gcp:
  stage: build
  image: docker:24.0.6-dind-alpine3.18
  tags:
    - gcp
    - dind
  needs:
    - job: generate-access-token-gcp
      artifacts: true
  before_script:
    - echo ${GCP_TOKEN} | docker login -u oauth2accesstoken --password-stdin
      "https://${GCP_LOCATION}"
  script:
    - cd "${CI_PROJECT_DIR}/mlflow"
    - docker build 
      -t "${GCP_LOCATION}/${GCP_REPO}/mlflow:${IMAGE_TAG}" 
      -f mlflow-server.Dockerfile
      --build-arg "MLFLOW_VER=${IMAGE_TAG}" .
    - docker push "${GCP_LOCATION}/${GCP_REPO}/mlflow:${IMAGE_TAG}"

